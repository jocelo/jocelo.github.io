{
  "pseudocode": [
    {
      "stepNo": "step1",
      "desc": "Declaramos la pila (stack)."
    }, {
      "stepNo": "step2",
      "desc": "Iteramos sobre la cadena que vamos a validar."
    }, {
      "stepNo": "step3",
      "desc": "Si el paréntesis es de apertura, lo agregamos a la pila."
    }, {
      "stepNo": "step4",
      "desc": "Si el paréntesis es de cierre, sacamos el ultimo paréntesis que insertamos en la pila.",
      "notes":{
        "noteNo": "step4.1",
        "desc": "Usando Python, tenemos que poner un bloque <span class=\"inline-block\">try</span>, ya que no podemos sacar un elemento de una pila vacía."
      }
    }, {
      "stepNo": "step5",
      "desc": "Comparamos el paréntesis que sacamos de la pila contra el paréntesis que estamos procesando. Si no es igual a su correspondiente paréntesis podemos regresar <span class=\"inline-code\">false</span> y no es necesario seguir validando."
    }, {
      "stepNo": "step6",
      "desc": "Si hemos terminado de procesar nuestra cadena pero tenemos al menos un elemento en la pila, significa que hay al menos un paréntesis de apertura que no tiene su correspondiente paréntesis de cierre."
    }, {
      "stepNo": "step7",
      "desc": "Si llegamos a este punto, podemos decir que todos los paréntesis de cierre tienen su correspondiente paréntesis de apertura, y que están posicionados correctamente, por lo que regresamos <span class=\"inline-code\">true</span>"
    }
  ],
  "javascript": {
    "code": [
      "",
      "  function balanceo(theString) {",
      "    const pila = [];",
      "    for (let par of theString) {",
      "      if (par == '(' || par == '{' || par == '[') {",
      "        pila.push(par);",
      "      }",
      "",
      "      if (par == ')') {",
      "        const parApertura = pila.pop();",
      "        if (parApertura != '(') {",
      "          return false;",
      "        }",
      "      }",
      "",
      "      if (par == '}') {",
      "        const parApertura = pila.pop();",
      "        if (parApertura != '{') {",
      "          return false;",
      "        }",
      "      }",
      "",
      "      if (par == ']') {",
      "        const parApertura = pila.pop();",
      "        if (parApertura != '[') {",
      "          return false;",
      "        }",
      "      }",
      "    }",
      "",
      "    if (pila.length > 0) {",
      "      return false;",
      "    }",
      "",
      "    return true;",
      "  }",
      "", ""
    ],
    "steps": [
      {
        "key": "step1",
        "codeLines": [3]
      },
      {
        "key": "step2",
        "codeLines": [4, 29]
      },
      {
        "key": "step3",
        "codeLines": [5, 6, 7]
      },
      {
        "key": "step4",
        "codeLines": [9, 10, 14, 16, 17, 21, 23, 24, 28]
      },
      {
        "key": "step5",
        "codeLines": [11, 12, 13, 17, 18, 19, 25, 26, 27]
      },
      {
        "key": "step6",
        "codeLines": [31, 32, 33]
      },
      {
        "key": "step7",
        "codeLines": [35]
      }
    ]
  },
  "python": {
    "code": [
      "",
      "def balanceo(the_string):",
      "  pila = []",
      "",
      "  for par in the_string:",
      "    if par == '(' or par == '{' or par == '[':",
      "      pila.append(par)",
      "",
      "    if par == ')':",
      "      try:",
      "        parApertura = pila.pop()",
      "      except:",
      "        return False",
      "",
      "      if parApertura != '(':",
      "        return False",
      "",
      "    if par == '}':",
      "      try:",
      "        parApertura = pila.pop()",
      "      except:",
      "        return False",
      "",
      "      if parApertura != '{':",
      "        return False",
      "",
      "    if par == ']':",
      "      try:",
      "        parApertura = pila.pop()",
      "      except:",
      "        return False",
      "",
      "      if parApertura != '[':",
      "        return False",
      "",
      "  if len(pila) > 0:",
      "    return False",
      "",
      "  return True",
      "", ""
    ],
    "steps": [
      {
        "key": "step1",
        "codeLines": [3]
      },
      {
        "key": "step2",
        "codeLines": [5]
      },
      {
        "key": "step3",
        "codeLines": [6, 7]
      },
      {
        "key": "step4",
        "codeLines": [9, 11, 18, 20, 27, 29]
      },
      {
        "key": "step4.1",
        "codeLines": [10, 11, 12, 13, 19, 20, 21, 22, 28, 29, 30, 31]
      },
      {
        "key": "step5",
        "codeLines": [15, 16, 24, 25, 33, 34]
      },
      {
        "key": "step6",
        "codeLines": [36, 37]
      },
      {
        "key": "step7",
        "codeLines": [39]
      }
    ]
  },
  "php": {
    "code": [
      "",
      "  function balanced($the_string) {",
      "    $stack = [];",
      "    $len = strlen($the_string);",
      "",
      "    for ($i=0 ; $i<$len ; $i++) {",
      "      $par = $the_string[$i];",
      "",
      "      if (in_array($par, ['(', '{', '['])) {",
      "        array_push($stack, $par);",
      "      }",
      "",
      "      if ($par == ')') {",
      "        $parOpen = array_pop($stack);",
      "        if ($parOpen != '(') {",
      "          return false;",
      "        }",
      "      }",
      "",
      "      if ($par == '}') {",
      "        $parOpen = array_pop($stack);",
      "        if ($parOpen != '{') {",
      "          return false;",
      "        }",
      "      }",
      "",
      "      if ($par == ']') {",
      "        $parOpen = array_pop($stack);",
      "        if ($parOpen != '[') {",
      "          return false;",
      "        }",
      "      }",
      "    }",
      "",
      "    if (count($stack) > 0) {",
      "      return false;",
      "    }",
      "",
      "    return true;",
      "  }",
      "", ""
    ],
    "steps": [
      {
        "key": "step1",
        "codeLines": [3]
      },
      {
        "key": "step2",
        "codeLines": [6, 33]
      },
      {
        "key": "step3",
        "codeLines": [9, 10, 11]
      },
      {
        "key": "step4",
        "codeLines": [13, 14, 20, 21, 27, 28]
      },
      {
        "key": "step5",
        "codeLines": [15, 16, 17, 22, 23, 24, 29, 30, 31]
      },
      {
        "key": "step6",
        "codeLines": [35, 36, 37]
      },
      {
        "key": "step7",
        "codeLines": [39]
      }
    ]
  }
}